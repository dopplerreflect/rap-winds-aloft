{"version":3,"sources":["components/SettingsProvider.tsx","components/MenuButton.tsx","components/NavButton.tsx","components/Header.tsx","components/Switch.tsx","components/Menu.tsx","components/About.tsx","components/Debug.tsx","lib/useForecast.ts","components/Loading.svg","components/Arrow.tsx","components/WindsAloft.tsx","lib/useGeoPosition.ts","lib/useElevation.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["InitialState","JSON","parse","localStorage","getItem","displayMetric","reducer","state","action","type","SettingsContext","createContext","dispatch","useSettings","useContext","SettingsProvider","children","useReducer","useEffect","setItem","stringify","Provider","value","MenuButton","className","xmlns","viewBox","id","width","height","rx","href","transform","NavButton","direction","data-testid","d","fill","strokeWidth","strokeLinejoin","strokeLinecap","Header","location","useLocation","history","useHistory","pathname","to","aria-label","onClick","goBack","replace","v","toUpperCase","BuildInfo","revision","Switch","title","checked","onChange","event","Settings","push","sessionStorage","removeItem","About","target","rel","Debug","useForecast","elevation","setStatus","useState","forecastJSON","setForecastJSON","cache","interval","setInterval","hour","clearCacheIfStale","Date","getUTCHours","clearInterval","abortController","AbortController","a","url","latitude","longitude","fetch","signal","response","json","console","error","name","fetchWindsAloftData","abort","Arrow","dir","cx","cy","r","stroke","WindsAloft","status","geoPosition","altitude","setGeoPosition","navigator","geolocation","getCurrentPosition","position","Number","coords","toFixed","useGeoPosition","setElevation","queryStr","Object","entries","x","y","units","output","map","pair","join","USGS_Elevation_Point_Query_Service","Elevation_Query","Elevation","fetchElevationData","useElevation","Wrapper","LoaderDiv","src","Loader","alt","WindsAloftTable","soundings","sounding","i","metersAGL","feetAGL","windSpd","kts","mph","windDir","temp","c","f","reverse","App","path","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"mYAQMA,EAAsBC,KAAKC,MAC/BC,aAAaC,QAAQ,aAAe,SACjC,CACHC,eAAe,GAGJC,EAAU,SAACC,EAAcC,GACpC,OAAQA,EAAOC,MACb,IAAK,uBACH,OAAO,2BACFF,GADL,IAEEF,eAAgBE,EAAMF,gBAE1B,QACE,OAAOE,IAIAG,EAAkBC,wBAG5B,CAAEJ,MAAOP,EAAcY,SAAU,eACvBC,EAAc,kBAAMC,qBAAWJ,IAgB7BK,EAdU,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAoB,EACpBC,qBAAWX,EAASN,GADA,mBACvCO,EADuC,KAChCK,EADgC,KAO9C,OAJAM,qBAAU,WACRf,aAAagB,QAAQ,WAAYlB,KAAKmB,UAAUb,MAC/C,CAACA,IAGF,cAACG,EAAgBW,SAAjB,CAA0BC,MAAO,CAAEf,QAAOK,YAA1C,SACGI,K,QC7BQO,EAZI,kBACjB,wBAAQC,UAAU,YAAlB,SACE,sBAAKC,MAAM,6BAA6BC,QAAQ,cAAhD,UACE,+BACE,sBAAMC,GAAG,MAAMC,MAAM,MAAMC,OAAO,KAAKC,GAAG,SAE5C,qBAAKC,KAAK,OAAOC,UAAU,qBAC3B,qBAAKD,KAAK,OAAOC,UAAU,qBAC3B,qBAAKD,KAAK,OAAOC,UAAU,4BCclBC,EAnB6B,SAAC,GAA4B,IAAD,IAAzBC,iBAAyB,MAAb,OAAa,EACtE,OACE,qBAAKT,MAAM,6BAA6BC,QAAQ,cAAhD,SACE,sBACES,cAAY,iBACZX,UAAU,QACVY,EAAE,8BACFC,KAAK,OACLC,YAAY,KACZC,eAAe,QACfC,cAAc,QACdR,UACgB,UAAdE,EAAwB,uCAAyC,QCsB5DO,EAhCU,WACvB,IAAMC,EAAWC,cACXC,EAAUC,cAChB,OACE,sBAAKrB,UAAU,YAAf,UACE,8BACyB,MAAtBkB,EAASI,SACR,cAAC,IAAD,CAAMC,GAAG,QAAQC,aAAW,OAA5B,SACE,cAAC,EAAD,MAGF,wBACEC,QAAS,kBAAML,EAAQM,UACvB1B,UAAU,OACVwB,aAAW,OAHb,SAKE,cAAC,EAAD,QAIN,qBAAKxB,UAAU,QAAf,SACyB,MAAtBkB,EAASI,SACN,cACAJ,EAASI,SACNK,QAAQ,MAAO,IACfA,QAAQ,OAAO,SAAAC,GAAC,OAAIA,EAAEC,mBAE/B,0CAAaC,EAAUC,gBCTdC,G,YApBU,WAAO,IAAD,EACD3C,IAApBN,EADqB,EACrBA,MAAOK,EADc,EACdA,SAMf,OACE,wBAAOY,UAAU,SAASiC,MAAM,sBAAhC,UACE,uBACEtB,cAAY,QACZ1B,KAAK,WACLiD,QAASnD,EAAMF,cACfsD,SAVc,SAACC,GACnBhD,EAAS,CAAEH,KAAM,4BAWf,sBAAMe,UAAU,sBCsCPqC,EAnDY,WACzB,IAAMjB,EAAUC,cACRjC,EAAaC,IAAbD,SAMR,OACE,qBAAIY,UAAU,OAAd,UACE,qBAAIyB,QAAS,kBAAML,EAAQkB,KAAK,WAAWd,aAAW,QAAtD,UACE,wCACA,8BACE,wBAAQxB,UAAU,OAAlB,SACE,cAAC,EAAD,CAAWU,UAAU,iBAK3B,qBAAIe,QAhBW,WACjBc,eAAeC,WAAW,SAC1BpB,EAAQM,UAcN,UACE,8CACA,8BACE,wBAAQ1B,UAAU,OAAOwB,aAAW,cAApC,SACE,cAAC,EAAD,CAAWd,UAAU,iBAK3B,qBACEe,QAAS,WACPrC,EAAS,CAAEH,KAAM,0BAFrB,UAKE,oDACA,8BACE,cAAC,EAAD,SAIJ,qBAAIwC,QAAS,kBAAML,EAAQkB,KAAK,WAAWd,aAAW,QAAtD,UACE,wCACA,8BACE,wBAAQxB,UAAU,OAAlB,SACE,cAAC,EAAD,CAAWU,UAAU,qBCQlB+B,G,MAtDD,kBACZ,sBAAKzC,UAAU,QAAf,UACE,uCACA,4EAC8C,IAC5C,mBACEO,KAAK,iCACLmC,OAAO,SACPC,IAAI,sBAHN,mCAFF,OAYA,uSAOA,uKAKA,8BACE,sBAAM3C,UAAU,UAAhB,0BADF,qHAKA,8CAEA,6BACE,+EAGF,yCAEA,+DAEA,4BACE,mBACEO,KAAK,+BACLmC,OAAO,SACPC,IAAI,sBAHN,6BCtCSC,EAPD,kBACZ,sBAAK5C,UAAU,QAAf,UACE,uCACA,+BAAOvB,KAAKmB,UAAUnB,KAAKC,MAAM6D,eAAe3D,QAAQ,UAAY,IAAK,KAAM,S,wBCsBtEiE,EAAc,SACzB3B,EACA4B,EACAC,GACuB,IAAD,EACkBC,mBAAgC,MADlD,mBACfC,EADe,KACDC,EADC,KAsDtB,OAhDAxD,qBAAU,WACR,IAAMyD,EAA+B1E,KAAKC,MACxC6D,eAAe3D,QAAQ,UAAY,QAErCsE,EAAgBC,KACf,CAACD,IAOJxD,qBAAU,WACR,IAAM0D,EAAWC,aAAY,YApCA,SAC/BC,EACAL,EACAC,GAEA,IAAID,EAKG,OAAO,EAJRK,IAASL,EAAaK,OACxBf,eAAeC,WAAW,SAC1BU,EAAgB,OA6BhBK,EACE,IAAIC,MAAOC,cACXR,EACAC,KAED,KACH,OAAO,kBAAMQ,cAAcN,MAC1B,CAACH,EAAcC,IAElBxD,qBAAU,WACR,IAAIuD,GAAiBH,EAArB,CACA,IAAMa,EAAkB,IAAIC,gBAoB5B,OAnByB,uCAAG,WAC1B1C,EACA4B,GAF0B,mBAAAe,EAAA,sEAMxBd,EAAU,yCACJe,EAPkB,6DAO0C5C,EAAS6C,SAPnD,YAO+D7C,EAAS8C,UAPxE,YAOqFlB,GAPrF,SAQDmB,MAAMH,EAAK,CAAEI,OAAQP,EAAgBO,SARpC,cAQlBC,EARkB,gBASLA,EAASC,OATJ,OASlBA,EATkB,OAUxBlB,EAAgBkB,GAChB7B,eAAe5C,QAAQ,QAASlB,KAAKmB,UAAUwE,IAC/CrB,EAAU,IAZc,kDAcxBsB,QAAQC,MAAM,KAAEC,MAdQ,0DAAH,uDAiBzBC,CAAoBtD,EAAU4B,GAEvB,kBAAMa,EAAgBc,YAC5B,CAACvD,EAAU4B,EAAWC,EAAWE,IAE7B,CAAEA,eAAcC,oBCnFV,MAA0B,oCC4B1BwB,EA5B0B,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OACvC,sBAAKzE,QAAQ,cAAcG,OAAO,MAAMD,MAAM,MAA9C,UACE,wBACED,GAAG,OACHyE,GAAG,MACHC,GAAG,MACHC,EAAE,qBACFC,OAAO,yBACPjE,YAAY,qBACZD,KAAK,wBAEP,sBACEF,cAAY,QACZR,GAAG,QACHS,EAAE,6LASFC,KAAK,uBACLL,UAAS,iBAAYmE,EAAZ,qBCNAK,EATc,WAAO,IAAD,EACLhC,mBAAS,cADJ,mBAC1BiC,EAD0B,KAClBlC,EADkB,KAE3BmC,ECVsB,WAAO,IAAD,EACIlC,mBAAS,CAC7Ce,SAAU,EACVC,UAAW,EACXmB,SAAU,IAJsB,mBAC3BD,EAD2B,KACdE,EADc,KAmBlC,OAZA1F,qBAAU,WACR2F,UAAUC,YAAYC,oBACpB,SAACC,GAAmC,IAAD,EACjCJ,EAAe,CACbrB,SAAU0B,OAAOD,EAASE,OAAO3B,SAAS4B,QAAQ,IAClD3B,UAAWyB,OAAOD,EAASE,OAAO1B,UAAU2B,QAAQ,IACpDR,SAAUM,OAAM,UAACD,EAASE,OAAOP,gBAAjB,aAAC,EAA0BQ,QAAQ,WAIxD,IAEIT,EDTaU,GACd9C,EENoB,SAC1B5B,EACA6B,GACY,IAAD,EACuBC,mBAAS,GADhC,mBACJF,EADI,KACO+C,EADP,KA+BX,OA7BAnG,qBAAU,WACR,IAAIoD,GAAc5B,EAAS6C,SAA3B,CACA,IAAMJ,EAAkB,IAAIC,gBAyB5B,OAxBwB,uCAAG,WAAO1C,GAAP,qBAAA2C,EAAA,sEAEvBd,EAAU,qCACJ+C,EAAWC,OAAOC,QAAQ,CAC9BC,EAAG/E,EAAS8C,UACZkC,EAAGhF,EAAS6C,SACZoC,MAAO,SACPC,OAAQ,SAEPC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,KAAK,QACtBA,KAAK,KACFzC,EAXiB,+CAW6BgC,GAX7B,SAYA7B,MAAMH,EAAK,CAAEI,OAAQP,EAAgBO,SAZrC,cAYjBC,EAZiB,gBAaJA,EAASC,OAbL,OAajBA,EAbiB,OAcvByB,EACEzB,EAAKoC,mCAAmCC,gBAAgBC,WAE1D3D,EAAU,IAjBa,kDAmBvBsB,QAAQC,MAAR,MAnBuB,0DAAH,qDAsBxBqC,CAAmBzF,GAEZ,kBAAMyC,EAAgBc,YAC5B,CAACvD,EAAU4B,EAAWC,IAClBD,EF5BW8D,CAAa1B,EAAanC,GACpCE,EAAiBJ,EAAYqC,EAAapC,EAAWC,GAArDE,aAER,OAAO,cAAC,EAAD,CAASgC,OAAQA,EAAQhC,aAAcA,EAAciC,YAAaA,KAK9D2B,EAIR,SAAC,GAA2C,IAAzC5B,EAAwC,EAAxCA,OAAQhC,EAAgC,EAAhCA,aAAciC,EAAkB,EAAlBA,YAC5B,OAAOjC,EACL,cAAC,EAAD,CAAiBA,aAAcA,EAAciC,YAAaA,IAE1D,cAAC,EAAD,CAAWD,OAAQA,KAIV6B,EAA0C,SAAC,GAAD,IAAG7B,EAAH,EAAGA,OAAH,OACrD,sBAAKjF,UAAU,oBAAf,UACE,6BAAKiF,IACL,qBAAK8B,IAAKC,EAAQC,IAAI,oBAAoBjH,UAAU,8BAI3CkH,EAGR,SAAC,GAAmC,IAAjCjE,EAAgC,EAAhCA,aAEKpE,GAF2B,EAAlBqG,YAGhB7F,IADFN,MAASF,eAEX,OACE,sBAAKsB,GAAG,oBAAoBQ,cAAY,oBAAxC,UACGsC,EAAakE,UACXd,KAAI,SAACe,EAAUC,GAAX,OACH,sBAAKrH,UAAU,WAAf,UACE,8BACGnB,EAAa,UACPuI,EAASjC,SAASmC,UADX,iBAEPF,EAASjC,SAASoC,QAFX,UAIhB,8BACG1I,EAAa,UAAMuI,EAASI,QAAQC,IAAvB,kBAAsCL,EAASI,QAAQE,IAAvD,UAEhB,8BACE,cAAC,EAAD,CAAO/C,IAAKyC,EAASO,YAEvB,gCAAMP,EAASO,QAAf,UACA,8BAAM9I,EAAa,UAAMuI,EAASQ,KAAKC,EAApB,oBAAgCT,EAASQ,KAAKE,EAA9C,aAbUT,MAgBhCU,UACH,qBAAK/H,UAAU,eG5BNgI,MA9Bf,WACE,OACE,cAAC,EAAD,UACE,cAAC,IAAD,UACE,sBAAK7H,GAAG,MAAR,UACE,qBAAKA,GAAG,SAAR,SACE,cAAC,EAAD,MAEF,qBAAKA,GAAG,OAAR,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO8H,KAAK,SAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,QAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,SAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,mBCjBVC,EAAcC,QACW,cAA7BC,OAAOlH,SAASmH,UAEe,UAA7BD,OAAOlH,SAASmH,UAEhBD,OAAOlH,SAASmH,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCpD,UAAUqD,cACPC,SAASH,GACTI,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhK,QACfsG,UAAUqD,cAAcQ,YAI1B7E,QAAQ8E,IACN,+GAKEV,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBxE,QAAQ8E,IAAI,sCAGRV,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BS,OAAM,SAAChF,GACND,QAAQC,MAAM,4CAA6CA,MCjGjE,IAYeiF,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFcnB,SAAkB1B,GACvB,GAA6C,kBAAmBpD,UAAW,CAGzE,GADkB,IAAI+E,IAAIC,mBAAwBjC,OAAOlH,SAASX,MACpD+J,SAAWlC,OAAOlH,SAASoJ,OAIvC,OAGFlC,OAAOmC,iBAAiB,QAAQ,WAC9B,IAAM/B,EAAK,UAAM6B,mBAAN,sBAEPnC,IAgEV,SAAiCM,EAAeC,GAE9CxE,MAAMuE,EAAO,CACXgC,QAAS,CAAE,iBAAkB,YAE5B5B,MAAK,SAACzE,GAEL,IAAMsG,EAActG,EAASqG,QAAQE,IAAI,gBAEnB,MAApBvG,EAASc,QACO,MAAfwF,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CtF,UAAUqD,cAAckC,MAAMhC,MAAK,SAACC,GAClCA,EAAagC,aAAajC,MAAK,WAC7BR,OAAOlH,SAAS4J,eAKpBvC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLjF,QAAQ8E,IAAI,oEAtFV4B,CAAwBvC,EAAOC,GAI/BpD,UAAUqD,cAAckC,MAAMhC,MAAK,WACjCvE,QAAQ8E,IACN,+GAMJZ,EAAgBC,EAAOC,OEpC/BuC,GAKAzB,M","file":"static/js/main.6b4da0f8.chunk.js","sourcesContent":["import { createContext, useContext, useEffect, useReducer } from 'react';\n\ntype Action = { type: 'toggle-displayMetric' } | { type: 'unknown' }; // for testing\n\ntype State = {\n  displayMetric: boolean;\n};\n\nconst InitialState: State = JSON.parse(\n  localStorage.getItem('settings') || 'null'\n) || {\n  displayMetric: false,\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'toggle-displayMetric':\n      return {\n        ...state,\n        displayMetric: !state.displayMetric,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const SettingsContext = createContext<{\n  state: State;\n  dispatch: React.Dispatch<Action>;\n}>({ state: InitialState, dispatch: () => {} });\nexport const useSettings = () => useContext(SettingsContext);\n\nconst SettingsProvider = ({ children }: any) => {\n  const [state, dispatch] = useReducer(reducer, InitialState);\n\n  useEffect(() => {\n    localStorage.setItem('settings', JSON.stringify(state));\n  }, [state]);\n\n  return (\n    <SettingsContext.Provider value={{ state, dispatch }}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n\nexport default SettingsProvider;\n","const MenuButton = () => (\n  <button className=\"menu icon\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 256\">\n      <defs>\n        <rect id=\"bar\" width=\"256\" height=\"48\" rx=\"16\" />\n      </defs>\n      <use href=\"#bar\" transform=\"translate(0, 16)\" />\n      <use href=\"#bar\" transform=\"translate(0, 96)\" />\n      <use href=\"#bar\" transform=\"translate(0, 176)\" />\n    </svg>\n  </button>\n);\nexport default MenuButton;\n","type NavButtonProps = {\n  direction?: 'left' | 'right';\n};\nconst NavButton: React.FC<NavButtonProps> = ({ direction = 'left' }) => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 256\">\n      <path\n        data-testid=\"forward-button\"\n        className=\"arrow\"\n        d=\"M 128 24 L 18 128 L 128 232\"\n        fill=\"none\"\n        strokeWidth=\"48\"\n        strokeLinejoin=\"round\"\n        strokeLinecap=\"round\"\n        transform={\n          direction === 'right' ? 'rotate(180, 128 128) translate(48,0)' : ''\n        }\n      />\n    </svg>\n  );\n};\n\nexport default NavButton;\n","import BuildInfo from '../Revision.json';\nimport MenuButton from './MenuButton';\nimport NavButton from './NavButton';\nimport { Link, useLocation, useHistory } from 'react-router-dom';\n\nconst Header: React.FC = () => {\n  const location = useLocation();\n  const history = useHistory();\n  return (\n    <div className=\"container\">\n      <div>\n        {location.pathname === '/' ? (\n          <Link to=\"/menu\" aria-label=\"Menu\">\n            <MenuButton />\n          </Link>\n        ) : (\n          <button\n            onClick={() => history.goBack()}\n            className=\"icon\"\n            aria-label=\"Back\"\n          >\n            <NavButton />\n          </button>\n        )}\n      </div>\n      <div className=\"title\">\n        {location.pathname === '/'\n          ? 'Winds Aloft'\n          : location.pathname\n              .replace(/^\\//, '')\n              .replace(/[^]/, v => v.toUpperCase())}\n      </div>\n      <div>Build: {BuildInfo.revision}</div>\n    </div>\n  );\n};\n\nexport default Header;\n","import './Switch.css';\nimport { useSettings } from './SettingsProvider';\n\nconst Switch: React.FC = () => {\n  const { state, dispatch } = useSettings();\n\n  const handleClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({ type: 'toggle-displayMetric' });\n  };\n\n  return (\n    <label className=\"switch\" title=\"displayMetricSwitch\">\n      <input\n        data-testid=\"input\"\n        type=\"checkbox\"\n        checked={state.displayMetric}\n        onChange={handleClick}\n      />\n      <span className=\"slider round\"></span>\n    </label>\n  );\n};\n\nexport default Switch;\n","import './Menu.css';\nimport { useHistory } from 'react-router-dom';\nimport { useSettings } from './SettingsProvider';\nimport NavButton from './NavButton';\nimport Switch from './Switch';\nconst Settings: React.FC = () => {\n  const history = useHistory();\n  const { dispatch } = useSettings();\n  const clearCache = () => {\n    sessionStorage.removeItem('cache');\n    history.goBack();\n  };\n\n  return (\n    <ul className='Menu'>\n      <li onClick={() => history.push('/about')} aria-label='About'>\n        <div>About</div>\n        <div>\n          <button className='icon'>\n            <NavButton direction='right' />\n          </button>\n        </div>\n      </li>\n\n      <li onClick={clearCache}>\n        <div>Clear Cache</div>\n        <div>\n          <button className='icon' aria-label='Clear Cache'>\n            <NavButton direction='right' />\n          </button>\n        </div>\n      </li>\n\n      <li\n        onClick={() => {\n          dispatch({ type: 'toggle-displayMetric' });\n        }}\n      >\n        <div>Display in Metric</div>\n        <div>\n          <Switch />\n        </div>\n      </li>\n\n      <li onClick={() => history.push('/debug')} aria-label='Debug'>\n        <div>Debug</div>\n        <div>\n          <button className='icon'>\n            <NavButton direction='right' />\n          </button>\n        </div>\n      </li>\n    </ul>\n  );\n};\n\nexport default Settings;\n","import './About.css';\n\nconst About = () => (\n  <div className=\"About\">\n    <h1>About</h1>\n    <p>\n      Display a current winds aloft forecast from{' '}\n      <a\n        href=\"https://rucsoundings.noaa.gov/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        rucsoundings.noaa.gov\n      </a>\n      .\n    </p>\n\n    <p>\n      Your location is determined using your device's location service. The\n      ground elevation and winds aloft forecast for your location are fetched\n      from online services. The forecast data is cached on your device until the\n      start of each hour, and refetched after that.\n    </p>\n\n    <p>\n      Reported altitudes are Above Ground Level (AGL). A future option may allow\n      the choice do display altitudes above Mean Sea Level (MSL).\n    </p>\n\n    <p>\n      <span className=\"warning\">PLEASE NOTE:</span> This app probably only works\n      correctly in the United States, as it uses NOAA and USGS services to\n      gather data.\n    </p>\n    <h2>Future plans</h2>\n\n    <ul>\n      <li>Integrate map service to fine-tune location</li>\n    </ul>\n\n    <h2>Contact</h2>\n\n    <p>David Rose (doppler@gmail.com)</p>\n\n    <p>\n      <a\n        href=\"https://facebook.com/doppler\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Facebook\n      </a>\n    </p>\n  </div>\n);\n\nexport default About;\n","const Debug = () => (\n  <div className='Debug'>\n    <h1>Debug</h1>\n    <code>{JSON.stringify(JSON.parse(sessionStorage.getItem('cache') || ''), null, 2)}</code>\n  </div>\n);\n\nexport default Debug;\n","import { useEffect, useState } from 'react';\nimport type { WindsAloftData } from '../types';\n\nconst InitialLocation = {\n  latitude: 0,\n  longitude: 0,\n};\n\ntype UseForecastReturn = {\n  forecastJSON: WindsAloftData | null;\n  setForecastJSON: Function;\n};\nexport const clearCacheIfStale = (\n  hour: number,\n  forecastJSON: WindsAloftData | null,\n  setForecastJSON: React.Dispatch<React.SetStateAction<WindsAloftData | null>>\n) => {\n  if (forecastJSON) {\n    if (hour === forecastJSON.hour) {\n      sessionStorage.removeItem('cache');\n      setForecastJSON(null);\n    }\n  } else return false;\n};\n\nexport const useForecast = (\n  location: typeof InitialLocation,\n  elevation: number,\n  setStatus: React.Dispatch<React.SetStateAction<string>>\n): UseForecastReturn => {\n  const [forecastJSON, setForecastJSON] = useState<WindsAloftData | null>(null);\n\n  /**\n   * On page load, load forecast data from cache\n   */\n  useEffect(() => {\n    const cache: WindsAloftData | null = JSON.parse(\n      sessionStorage.getItem('cache') || 'null'\n    );\n    setForecastJSON(cache);\n  }, [setForecastJSON]);\n\n  /**\n   * On page load, start a timer that fires every minute.\n   * When the current hour matches the forecast's hour, clear the\n   * forecast cache.\n   */\n  useEffect(() => {\n    const interval = setInterval(() => {\n      clearCacheIfStale(\n        new Date().getUTCHours(),\n        forecastJSON,\n        setForecastJSON\n      );\n    }, 1000 * 60);\n    return () => clearInterval(interval);\n  }, [forecastJSON, setForecastJSON]);\n\n  useEffect(() => {\n    if (forecastJSON || !elevation) return;\n    const abortController = new AbortController();\n    const fetchWindsAloftData = async (\n      location: typeof InitialLocation,\n      elevation: number\n    ) => {\n      // console.log('fetching winds aloft');\n      try {\n        setStatus('Fetching winds aloft forecast data...');\n        const url = `https://weatherflow-dash.herokuapp.com/winds-aloft/${location.latitude}/${location.longitude}/${elevation}`;\n        const response = await fetch(url, { signal: abortController.signal });\n        const json = await response.json();\n        setForecastJSON(json);\n        sessionStorage.setItem('cache', JSON.stringify(json));\n        setStatus('');\n      } catch (e) {\n        console.error(e.name);\n      }\n    };\n    fetchWindsAloftData(location, elevation);\n\n    return () => abortController.abort();\n  }, [location, elevation, setStatus, forecastJSON]);\n\n  return { forecastJSON, setForecastJSON };\n};\n","export default __webpack_public_path__ + \"static/media/Loading.54435b2a.svg\";","const Arrow: React.FC<{ dir: number }> = ({ dir }) => (\n  <svg viewBox=\"0 0 512 512\" height=\"2em\" width=\"2em\">\n    <circle\n      id=\"ring\"\n      cx=\"256\"\n      cy=\"256\"\n      r=\"237.32505032019532\"\n      stroke=\"var(--highlight-color)\"\n      strokeWidth=\"37.349899359609346\"\n      fill=\"var(--border-color)\"\n    />\n    <path\n      data-testid=\"arrow\"\n      id=\"arrow\"\n      d=\"\n        M 260.4 0\n        L 269.56814539771983 274.6749500197458\n        L 313.475583094649 335.1083534400135\n        L 256 512\n        L 198.52441690535102 335.1083534400135\n        L 242.43185460228014 274.6749500197458\n        L 251.6 0\n        Z\"\n      fill=\"var(--warning-color)\"\n      transform={`rotate(${dir}, 256, 256)`}\n    />\n  </svg>\n);\nexport default Arrow;\n","import { useState } from 'react';\nimport { useGeoPosition } from '../lib/useGeoPosition';\nimport { useElevation } from '../lib/useElevation';\nimport { useForecast } from '../lib/useForecast';\nimport Loader from './Loading.svg';\nimport Arrow from './Arrow';\nimport { WindsAloftData, GeoPosition } from '../types';\nimport { useSettings } from './SettingsProvider';\n\nconst WindsAloft: React.FC = () => {\n  const [status, setStatus] = useState('Loading...');\n  const geoPosition = useGeoPosition();\n  const elevation = useElevation(geoPosition, setStatus);\n  const { forecastJSON } = useForecast(geoPosition, elevation, setStatus);\n\n  return <Wrapper status={status} forecastJSON={forecastJSON} geoPosition={geoPosition} />;\n};\n\nexport default WindsAloft;\n\nexport const Wrapper: React.FC<{\n  status: string;\n  forecastJSON: WindsAloftData | null;\n  geoPosition: GeoPosition;\n}> = ({ status, forecastJSON, geoPosition }) => {\n  return forecastJSON ? (\n    <WindsAloftTable forecastJSON={forecastJSON} geoPosition={geoPosition} />\n  ) : (\n    <LoaderDiv status={status} />\n  );\n};\n\nexport const LoaderDiv: React.FC<{ status: string }> = ({ status }) => (\n  <div className='Loading-indicator'>\n    <h2>{status}</h2>\n    <img src={Loader} alt='Loading indicator' className='Loading-indicator-svg' />\n  </div>\n);\n\nexport const WindsAloftTable: React.FC<{\n  forecastJSON: WindsAloftData;\n  geoPosition: GeoPosition;\n}> = ({ forecastJSON, geoPosition }) => {\n  const {\n    state: { displayMetric },\n  } = useSettings();\n  return (\n    <div id='winds-aloft-chart' data-testid='winds-aloft-chart'>\n      {forecastJSON.soundings\n        .map((sounding, i) => (\n          <div className='sounding' key={i}>\n            <div>\n              {displayMetric\n                ? `${sounding.altitude.metersAGL} m.`\n                : `${sounding.altitude.feetAGL} ft.`}\n            </div>\n            <div>\n              {displayMetric ? `${sounding.windSpd.kts} kts` : `${sounding.windSpd.mph} mph`}\n            </div>\n            <div>\n              <Arrow dir={sounding.windDir} />\n            </div>\n            <div>{sounding.windDir}°</div>\n            <div>{displayMetric ? `${sounding.temp.c} °C` : `${sounding.temp.f}°F`}</div>\n          </div>\n        ))\n        .reverse()}\n      <div className='footer'></div>\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nexport const useGeoPosition = () => {\n  const [geoPosition, setGeoPosition] = useState({\n    latitude: 0,\n    longitude: 0,\n    altitude: 0,\n  });\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      (position: GeolocationPosition) => {\n        setGeoPosition({\n          latitude: Number(position.coords.latitude.toFixed(7)),\n          longitude: Number(position.coords.longitude.toFixed(7)),\n          altitude: Number(position.coords.altitude?.toFixed(1)),\n        });\n      }\n    );\n  }, []);\n\n  return geoPosition;\n};\n","import { useEffect, useState } from 'react';\n\nconst InitialLocation = {\n  latitude: 0,\n  longitude: 0,\n};\nexport const useElevation = (\n  location: typeof InitialLocation,\n  setStatus: React.Dispatch<React.SetStateAction<string>>\n): number => {\n  const [elevation, setElevation] = useState(0);\n  useEffect(() => {\n    if (elevation || !location.latitude) return;\n    const abortController = new AbortController();\n    const fetchElevationData = async (location: typeof InitialLocation) => {\n      try {\n        setStatus('Determining location elevation...');\n        const queryStr = Object.entries({\n          x: location.longitude,\n          y: location.latitude,\n          units: 'Meters',\n          output: 'json',\n        })\n          .map(pair => pair.join('='))\n          .join('&');\n        const url = `https://nationalmap.gov/epqs/pqs.php?${queryStr}`;\n        const response = await fetch(url, { signal: abortController.signal });\n        const json = await response.json();\n        setElevation(\n          json.USGS_Elevation_Point_Query_Service.Elevation_Query.Elevation\n        );\n        setStatus('');\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchElevationData(location);\n\n    return () => abortController.abort();\n  }, [location, elevation, setStatus]);\n  return elevation;\n};\n","import { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport SettingsProvider from './components/SettingsProvider';\nimport Header from './components/Header';\nimport Menu from './components/Menu';\nimport About from './components/About';\nimport Debug from './components/Debug';\nimport WindsAloft from './components/WindsAloft';\n\nfunction App() {\n  return (\n    <SettingsProvider>\n      <Router>\n        <div id='App'>\n          <div id='Header'>\n            <Header />\n          </div>\n          <div id='Main'>\n            <Switch>\n              <Route path='/about'>\n                <About />\n              </Route>\n              <Route path='/menu'>\n                <Menu />\n              </Route>\n              <Route path='/debug'>\n                <Debug />\n              </Route>\n              <Route path='/'>\n                <WindsAloft />\n              </Route>\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    </SettingsProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}